"use client"

import { useState, useCallback } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { useToast } from "@/components/ui/use-toast"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Skeleton } from "@/components/ui/skeleton"
import { Upload, X, FileWarning, Activity, FileCode, AlertCircle, CheckCircle2, FileType2, FileCog, FileX } from "lucide-react"

interface AnalysisResult {
  filename: string;
  filesize: number;
  filetype: string;
  is_malicious: boolean;
  confidence_score: number;
  threat_level: string;
  indicators: {
    suspicious_imports?: boolean;
    known_signatures?: boolean;
    encrypted_sections?: boolean;
    network_behavior?: boolean;
    system_modifications?: boolean;
    persistence_mechanisms?: boolean;
  };
  detection_time: string;
}

export default function MalwarePrediction() {
  const { toast } = useToast();
  const [isDragging, setIsDragging] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [file, setFile] = useState<File | null>(null);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [scanHistory, setScanHistory] = useState<AnalysisResult[]>([]);
  
  // Handle drag events
  const handleDragEnter = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  }, []);
  
  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  }, []);
  
  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);
  
  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    
    const droppedFile = e.dataTransfer.files[0];
    if (droppedFile) {
      setFile(droppedFile);
    }
  }, []);
  
  // Handle file input change
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };
  
  // Handle file analysis
  const analyzeFile = async () => {
    if (!file) return;
    
    setIsAnalyzing(true);
    
    try {
      // Create form data
      const formData = new FormData();
      formData.append('file', file);
      
      // Call the malware analysis API
      const response = await fetch('/api/malware/analyze', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem("authToken") || sessionStorage.getItem("authToken")}`
        },
        body: formData
      });
      
      if (!response.ok) {
        throw new Error('Failed to analyze file');
      }
      
      const result = await response.json();
      setAnalysisResult(result);
      
      // Add to scan history
      setScanHistory(prev => [result, ...prev].slice(0, 5));
      
      // Show success toast
      toast({
        title: 'Analysis Complete',
        description: `${file.name} has been analyzed.`,
      });
    } catch (error) {
      console.error('Error analyzing file:', error);
      toast({
        variant: 'destructive',
        title: 'Analysis Failed',
        description: error instanceof Error ? error.message : 'An unexpected error occurred',
      });
    } finally {
      setIsAnalyzing(false);
    }
  };
  
  // Reset the file input
  const resetFile = () => {
    setFile(null);
    setAnalysisResult(null);
  };
  
  // Helper function to format file size
  const formatFileSize = (bytes: number): string => {
    if (bytes < 1024) return bytes + ' bytes';
    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
    else return (bytes / 1048576).toFixed(1) + ' MB';
  };
  
  // Helper function to determine status badge
  const getThreatBadge = (threatLevel: string) => {
    switch (threatLevel.toLowerCase()) {
      case 'critical':
        return <Badge className="bg-red-500/20 text-red-500">Critical</Badge>;
      case 'high':
        return <Badge className="bg-orange-500/20 text-orange-500">High</Badge>;
      case 'medium':
        return <Badge className="bg-yellow-500/20 text-yellow-500">Medium</Badge>;
      case 'low':
        return <Badge className="bg-green-500/20 text-green-500">Low</Badge>;
      default:
        return <Badge className="bg-gray-500/20 text-gray-500">Unknown</Badge>;
    }
  };
  
  // Helper function to determine confidence badge
  const getConfidenceBadge = (score: number) => {
    if (score >= 80) return <Badge variant="outline" className="text-red-500 border-red-500/50">{score}%</Badge>;
    if (score >= 60) return <Badge variant="outline" className="text-orange-500 border-orange-500/50">{score}%</Badge>;
    if (score >= 40) return <Badge variant="outline" className="text-yellow-500 border-yellow-500/50">{score}%</Badge>;
    return <Badge variant="outline" className="text-green-500 border-green-500/50">{score}%</Badge>;
  };
  return (
    <div className="space-y-6">
      {/* File Upload Component */}
      <Card className="border-gray-800 bg-black/60 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-xl font-medium text-cyan-400 flex items-center gap-2">
            <FileCode className="h-5 w-5" />
            Malware File Scanner
          </CardTitle>
          <CardDescription className="text-gray-400">
            Upload a file to analyze it for potential malware and security threats.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* File Drop Area */}
          <div
            className={`border-2 border-dashed rounded-lg p-8 ${isDragging ? 'border-cyan-400 bg-cyan-500/5' : 'border-gray-700 bg-gray-900/30'} transition-colors duration-150 flex flex-col items-center justify-center cursor-pointer`}
            onDragEnter={handleDragEnter}
            onDragLeave={handleDragLeave}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
            onClick={() => document.getElementById('file-upload')?.click()}
          >
            <input
              id="file-upload"
              type="file"
              className="hidden"
              onChange={handleFileChange}
              disabled={isAnalyzing}
            />
            
            {!file && (
              <div className="text-center">
                <Upload className="h-12 w-12 text-gray-500 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-white mb-2">Drag & Drop File Here</h3>
                <p className="text-sm text-gray-400 mb-4">or click to browse your files</p>
                <p className="text-xs text-gray-500">Supported formats: .exe, .dll, .pdf, .doc, .docx, .xls, .xlsx, .js, .vbs, .ps1</p>
              </div>
            )}
            
            {file && !isAnalyzing && !analysisResult && (
              <div className="w-full">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className="h-10 w-10 rounded-md bg-gray-800 flex items-center justify-center">
                      <FileType2 className="h-5 w-5 text-cyan-400" />
                    </div>
                    <div>
                      <p className="font-medium text-white truncate max-w-[200px]">{file.name}</p>
                      <p className="text-xs text-gray-400">{formatFileSize(file.size)}</p>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <Button
                      variant="outline" 
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        resetFile();
                      }}
                      className="border-gray-700 text-gray-400 hover:text-white hover:border-gray-600"
                    >
                      <X className="h-4 w-4 mr-1" />
                      Cancel
                    </Button>
                    <Button
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        analyzeFile();
                      }}
                      className="bg-gradient-to-r from-cyan-500 to-purple-600 hover:from-cyan-600 hover:to-purple-700"
                    >
                      <FileCog className="h-4 w-4 mr-1" />
                      Analyze
                    </Button>
                  </div>
                </div>
              </div>
            )}
            
            {isAnalyzing && (
              <div className="w-full">
                <p className="text-center text-cyan-400 mb-4">Analyzing file for threats...</p>
                <div className="flex items-center justify-between mb-2">
                  <p className="text-sm text-gray-400">Scanning {file?.name}</p>
                  <Skeleton className="h-4 w-4 rounded-full bg-gray-700" />
                </div>
                <div className="relative h-1 w-full overflow-hidden rounded-full bg-gray-800">
                  <div className="h-full bg-gradient-to-r from-cyan-500 to-purple-600 transition-all animate-pulse" style={{ width: '60%' }} />
                </div>
                <div className="grid grid-cols-2 gap-4 mt-4">
                  <Skeleton className="h-12 w-full rounded-md bg-gray-800" />
                  <Skeleton className="h-12 w-full rounded-md bg-gray-800" />
                  <Skeleton className="h-12 w-full rounded-md bg-gray-800" />
                  <Skeleton className="h-12 w-full rounded-md bg-gray-800" />
                </div>
              </div>
            )}
          </div>
          
          {/* Analysis Results */}
          {analysisResult && !isAnalyzing && (
            <div className="mt-6 border border-gray-800 rounded-md overflow-hidden">
              <div className={`p-4 ${analysisResult.is_malicious ? 'bg-red-900/20' : 'bg-green-900/20'}`}>
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-lg font-medium text-white">{analysisResult.filename}</h3>
                    <p className="text-sm text-gray-400">{analysisResult.filetype} • {formatFileSize(analysisResult.filesize)}</p>
                  </div>
                  <div className="flex items-center">
                    <div className={`h-10 w-10 rounded-full ${analysisResult.is_malicious ? 'bg-red-500/20' : 'bg-green-500/20'} flex items-center justify-center`}>
                      {analysisResult.is_malicious ? (
                        <FileX className="h-5 w-5 text-red-500" />
                      ) : (
                        <CheckCircle2 className="h-5 w-5 text-green-500" />
                      )}
                    </div>
                  </div>
                </div>
              </div>

              <div className="p-4 bg-gray-900/40 border-t border-gray-800">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <p className="text-sm text-gray-400">Threat Level:</p>
                      {getThreatBadge(analysisResult.threat_level)}
                    </div>
                    <div className="flex justify-between">
                      <p className="text-sm text-gray-400">Confidence:</p>
                      {getConfidenceBadge(analysisResult.confidence_score)}
                    </div>
                    <div className="flex justify-between">
                      <p className="text-sm text-gray-400">Scanned:</p>
                      <p className="text-sm text-gray-300">{new Date(analysisResult.detection_time).toLocaleString()}</p>
                    </div>
                  </div>

                  <div className="space-y-2">
                    {Object.entries(analysisResult.indicators).map(([key, value]) => {
                      const formattedKey = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                      return (
                        <div key={key} className="flex justify-between">
                          <p className="text-sm text-gray-400">{formattedKey}:</p>
                          <Badge className={value ? "bg-red-500/20 text-red-500" : "bg-green-500/20 text-green-500"}>
                            {value ? "Detected" : "Not Detected"}
                          </Badge>
                        </div>
                      );
                    })}
                  </div>
                </div>

                <div className="mt-4 pt-4 border-t border-gray-800">
                  <p className="text-sm text-gray-400 mb-2">Verdict:</p>
                  <p className="text-sm text-gray-300">
                    {analysisResult.is_malicious 
                      ? `This file contains malicious code with ${analysisResult.confidence_score}% confidence. We recommend deleting it immediately.`
                      : "This file appears to be safe based on our analysis. No malicious patterns were detected."}
                  </p>
                </div>
                
                <div className="mt-4 flex space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={resetFile}
                    className="border-gray-700 text-gray-400 hover:text-white hover:border-gray-600"
                  >
                    Scan Another File
                  </Button>
                  {analysisResult.is_malicious && (
                    <Button
                      size="sm"
                      variant="destructive"
                      className="bg-red-900/30 text-red-400 hover:bg-red-900/50 hover:text-red-300 border border-red-900/50"
                    >
                      Quarantine File
                    </Button>
                  )}
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Predicted Malware Types */}
        <Card className="border-gray-800 bg-black/60 backdrop-blur-sm">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-lg font-medium text-cyan-400 flex items-center gap-2">
              <FileWarning className="h-5 w-5" />
              Predicted Malware Types
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="h-3 w-3 rounded-full bg-red-500"></div>
                    <span>Ransomware</span>
                  </div>
                  <span className="text-sm text-gray-400">42%</span>
                </div>
                <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-800">
                  <div
                    className="h-full bg-gradient-to-r from-red-500 to-red-600 transition-all"
                    style={{ width: '42%' }}
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="h-3 w-3 rounded-full bg-orange-500"></div>
                    <span>Trojan</span>
                  </div>
                  <span className="text-sm text-gray-400">28%</span>
                </div>
                <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-800">
                  <div
                    className="h-full bg-gradient-to-r from-orange-500 to-orange-600 transition-all"
                    style={{ width: '28%' }}
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="h-3 w-3 rounded-full bg-yellow-500"></div>
                    <span>Spyware</span>
                  </div>
                  <span className="text-sm text-gray-400">15%</span>
                </div>
                <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-800">
                  <div
                    className="h-full bg-gradient-to-r from-yellow-500 to-yellow-600 transition-all"
                    style={{ width: '15%' }}
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="h-3 w-3 rounded-full bg-purple-500"></div>
                    <span>Rootkit</span>
                  </div>
                  <span className="text-sm text-gray-400">10%</span>
                </div>
                <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-800">
                  <div
                    className="h-full bg-gradient-to-r from-purple-500 to-purple-600 transition-all"
                    style={{ width: '10%' }}
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="h-3 w-3 rounded-full bg-cyan-500"></div>
                    <span>Adware</span>
                  </div>
                  <span className="text-sm text-gray-400">5%</span>
                </div>
                <div className="relative h-2 w-full overflow-hidden rounded-full bg-gray-800">
                  <div
                    className="h-full bg-gradient-to-r from-cyan-500 to-cyan-600 transition-all"
                    style={{ width: '5%' }}
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Malware Activity Graph */}
        <Card className="border-gray-800 bg-black/60 backdrop-blur-sm">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-lg font-medium text-cyan-400 flex items-center gap-2">
              <Activity className="h-5 w-5" />
              Malware Activity
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="aspect-video bg-gray-900/60 rounded-md border border-gray-800 flex items-center justify-center p-4">
              <div className="w-full h-full relative">
                {/* Line chart visualization */}
                <svg className="w-full h-full" viewBox="0 0 300 150" preserveAspectRatio="none">
                  {/* Grid lines */}
                  <line x1="0" y1="0" x2="0" y2="150" stroke="#374151" strokeWidth="1" />
                  <line x1="0" y1="150" x2="300" y2="150" stroke="#374151" strokeWidth="1" />
                  <line x1="0" y1="37.5" x2="300" y2="37.5" stroke="#374151" strokeWidth="0.5" strokeDasharray="4" />
                  <line x1="0" y1="75" x2="300" y2="75" stroke="#374151" strokeWidth="0.5" strokeDasharray="4" />
                  <line x1="0" y1="112.5" x2="300" y2="112.5" stroke="#374151" strokeWidth="0.5" strokeDasharray="4" />
                  
                  {/* File scan line (blue) */}
                  <polyline
                    points="0,120 50,100 100,110 150,90 200,95 250,80 300,70"
                    fill="none"
                    stroke="#0ea5e9"
                    strokeWidth="2"
                  />
                  
                  {/* Malware prediction line (purple) */}
                  <polyline
                    points="0,130 50,120 100,90 150,100 200,60 250,40 300,30"
                    fill="none"
                    stroke="#a855f7"
                    strokeWidth="2"
                  />
                  
                  {/* Legend */}
                  <circle cx="15" cy="15" r="4" fill="#0ea5e9" />
                  <text x="25" y="19" fontSize="10" fill="#d1d5db">File Scans</text>
                  
                  <circle cx="85" cy="15" r="4" fill="#a855f7" />
                  <text x="95" y="19" fontSize="10" fill="#d1d5db">Malware Predictions</text>
                </svg>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* File Behavior Tree */}
        <Card className="border-gray-800 bg-black/60 backdrop-blur-sm">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-lg font-medium text-cyan-400 flex items-center gap-2">
              <FileCode className="h-5 w-5" />
              File Behavior Tree
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-900/60 rounded-md border border-gray-800 p-4 h-64 overflow-auto">
              <div className="space-y-2">
                <div className="flex items-start">
                  <div className="mr-2 mt-1">
                    <FileWarning className="h-4 w-4 text-red-500" />
                  </div>
                  <div>
                    <p className="text-sm font-medium">suspicious.exe</p>
                    <div className="ml-4 mt-1 space-y-1 border-l border-gray-700 pl-3">
                      <p className="text-xs text-gray-400">→ Creates registry key in HKCU\Software\RunOnce</p>
                      <p className="text-xs text-gray-400">→ Modifies system32\drivers\etc\hosts</p>
                      <p className="text-xs text-gray-400">→ Injects code into explorer.exe</p>
                      <p className="text-xs text-red-400">→ Attempts to disable Windows Defender</p>
                      <p className="text-xs text-gray-400">→ Creates scheduled task "SysUpdate"</p>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-start">
                  <div className="mr-2 mt-1">
                    <FileWarning className="h-4 w-4 text-orange-500" />
                  </div>
                  <div>
                    <p className="text-sm font-medium">update.dll</p>
                    <div className="ml-4 mt-1 space-y-1 border-l border-gray-700 pl-3">
                      <p className="text-xs text-gray-400">→ Loads at system startup</p>
                      <p className="text-xs text-gray-400">→ Creates outbound connection to 192.168.1.100</p>
                      <p className="text-xs text-orange-400">→ Downloads additional payload</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Quarantine Box */}
        <Card className="border-gray-800 bg-black/60 backdrop-blur-sm">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-lg font-medium text-cyan-400 flex items-center gap-2">
              <FileWarning className="h-5 w-5" />
              Quarantine Box
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-900/60 rounded-md border border-gray-800 p-4 h-64 flex flex-col items-center justify-center">
              <div className="text-center">
                <FileX className="h-12 w-12 text-gray-500 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-white mb-2">No Quarantined Files</h3>
                <p className="text-sm text-gray-400">Any detected malicious files will appear here after quarantine.</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Analysis History */}
        <Card className="border-gray-800 bg-black/60 backdrop-blur-sm">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-lg font-medium text-cyan-400 flex items-center gap-2">
              <Activity className="h-5 w-5" />
              Analysis History
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-900/60 rounded-md border border-gray-800 p-4 h-64 overflow-auto">
              {scanHistory.length > 0 ? (
                <div className="space-y-3">
                  {scanHistory.map((scan, index) => (
                    <div key={index} className="flex items-start border-b border-gray-800 pb-3 last:border-0 last:pb-0">
                      <div className="mr-3 mt-1">
                        <div className={`h-8 w-8 rounded-full ${scan.is_malicious ? 'bg-red-500/20' : 'bg-green-500/20'} flex items-center justify-center`}>
                          {scan.is_malicious ? (
                            <FileX className="h-4 w-4 text-red-500" />
                          ) : (
                            <CheckCircle2 className="h-4 w-4 text-green-500" />
                          )}
                        </div>
                      </div>
                      <div>
                        <div className="flex items-center">
                          <p className="text-sm font-medium text-white">{scan.filename}</p>
                          <span className="mx-2 text-gray-500">•</span>
                          <p className="text-xs text-gray-400">{new Date(scan.detection_time).toLocaleString()}</p>
                        </div>
                        <div className="flex items-center mt-1">
                          <p className="text-xs text-gray-400 mr-2">{scan.filetype}</p>
                          {getThreatBadge(scan.threat_level)}
                          <span className="mx-2"></span>
                          {getConfidenceBadge(scan.confidence_score)}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="h-full flex items-center justify-center">
                  <p className="text-sm text-gray-500">No files analyzed yet</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
